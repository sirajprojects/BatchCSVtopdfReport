package batch.com.csvtopdfgenerater.writer;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import org.springframework.batch.item.ItemWriter;
import org.springframework.context.annotation.Bean;

import batch.com.csvtopdfgenerater.entity.PatientReport;
import batch.com.csvtopdfgenerater.repository.ReportRepository;


public class UsingPDFbox implements ItemWriter<PatientReport> {

	private final ReportRepository personRepository;

	public UsingPDFbox(ReportRepository personRepository) {
		this.personRepository = personRepository;
	}

	@Override
	public void write(List<? extends PatientReport> persons) throws Exception {
		personRepository.saveAll(persons);
	}

	@Bean
	public ItemWriter<PatientReport> pdfWriter() {
		return new ItemWriter<PatientReport>() {
			@Override
			public void write(List<? extends PatientReport> items) throws Exception {
				File outputDir = new File("OUTPUT");
				if (!outputDir.exists()) {
					outputDir.mkdirs();
				}

				try (PDDocument document = new PDDocument()) {
					for (PatientReport report : items) {
						PDPage page = new PDPage(PDRectangle.A4);
						document.addPage(page);

						try (PDPageContentStream contentStream = new PDPageContentStream(document, page)) {
							addTitlePage(contentStream, report);
							addReportToDocument(contentStream, report);
						}
					}

					String outputPath = "OUTPUT/report.pdf";
					document.save(outputPath);
				} catch (IOException e) {
					e.printStackTrace();
					throw new RuntimeException("Error creating PDF", e);
				}
			}
		};
	}

	private void addTitlePage(PDPageContentStream contentStream, PatientReport report) throws IOException {
		float margin = 50;
		float y = PDRectangle.A4.getHeight() - margin;
		float leading = 1.5f * 12;

		contentStream.setFont(PDType1Font.TIMES_BOLD, 16);
		contentStream.beginText();
		contentStream.newLineAtOffset(margin, y);
		contentStream.showText("Pathologist's Report");
		contentStream.endText();

		y -= leading;
		contentStream.setFont(PDType1Font.TIMES_ITALIC, 14);
		contentStream.beginText();
		contentStream.newLineAtOffset(margin, y);
		contentStream.showText("Generated by XYZ Lab");
		contentStream.endText();

		y -= leading;
		contentStream.setFont(PDType1Font.TIMES_ROMAN, 12);
		contentStream.beginText();
		contentStream.newLineAtOffset(margin, y);
		contentStream.showText(new SimpleDateFormat("yyyy-MM-dd").format(new Date()));
		contentStream.endText();
	}

	private void addReportToDocument(PDPageContentStream contentStream, PatientReport report) throws IOException {
		float margin = 50;
		float y = PDRectangle.A4.getHeight() - margin - (3 * 1.5f * 12); // Adjust y position after title
		float leading = 1.5f * 12;

		y -= leading;
		addText(contentStream, "Generated on: " + new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()), y, margin, PDType1Font.TIMES_ROMAN, 10);

		y -= leading;
		addText(contentStream, "Patient Information", y, margin, PDType1Font.TIMES_BOLD, 12);
		y -= leading;
		addText(contentStream, "Patient ID: " + report.getPatientId(), y, margin, PDType1Font.TIMES_ROMAN, 10);
		y -= leading;
		addText(contentStream, "Patient Name: " + report.getPatientName(), y, margin, PDType1Font.TIMES_ROMAN, 10);
		y -= leading;
		addText(contentStream, "Date of Birth: " + report.getDateOfBirth(), y, margin, PDType1Font.TIMES_ROMAN, 10);
		y -= leading;
		addText(contentStream, "Gender: " + report.getGender(), y, margin, PDType1Font.TIMES_ROMAN, 10);

		y -= leading;
		addText(contentStream, "Report Details", y, margin, PDType1Font.TIMES_BOLD, 12);
		y -= leading;
		addText(contentStream, "Report ID: " + report.getReportId(), y, margin, PDType1Font.TIMES_ROMAN, 10);
		y -= leading;
		addText(contentStream, "Date of Report: " + report.getDateOfReport(), y, margin, PDType1Font.TIMES_ROMAN, 10);
		y -= leading;
		addText(contentStream, "Specimen Type: " + report.getSpecimenType(), y, margin, PDType1Font.TIMES_ROMAN, 10);
		y -= leading;
		addText(contentStream, "Specimen Collection Date: " + report.getSpecimenCollectionDate(), y, margin, PDType1Font.TIMES_ROMAN, 10);

		y -= leading;
		addText(contentStream, "Diagnosis", y, margin, PDType1Font.TIMES_BOLD, 12);
		y -= leading;
		addText(contentStream, report.getDiagnosis(), y, margin, PDType1Font.TIMES_ROMAN, 10);

		y -= leading;
		addText(contentStream, "Microscopic Description", y, margin, PDType1Font.TIMES_BOLD, 12);
		y -= leading;
		addText(contentStream, report.getMicroscopicDescription(), y, margin, PDType1Font.TIMES_ROMAN, 10);

		y -= leading;
		addText(contentStream, "Pathologist Information", y, margin, PDType1Font.TIMES_BOLD, 12);
		y -= leading;
		addText(contentStream, "Pathologist Name: " + report.getPathologistName(), y, margin, PDType1Font.TIMES_ROMAN, 10);

		y -= leading;
		addText(contentStream, "Comments", y, margin, PDType1Font.TIMES_BOLD, 12);
		y -= leading;
		addText(contentStream, report.getComments(), y, margin, PDType1Font.TIMES_ROMAN, 10);
	}

	private void addText(PDPageContentStream contentStream, String text, float y, float margin, PDType1Font font, int fontSize) throws IOException {
		contentStream.setFont(font, fontSize);
		contentStream.beginText();
		contentStream.newLineAtOffset(margin, y);
		contentStream.showText(text);
		contentStream.endText();
	}
}
